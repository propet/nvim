if &compatible
  set nocompatible
endif 

set runtimepath+=~/.config/nvim/dein/repos/github.com/Shougo/dein.vim

if dein#load_state('~/.config/nvim/dein')
  call dein#begin('~/.config/nvim/dein')
  " Add or remove you plugins here: " 
  call dein#add('~/.config/nvim/dein/repos/github.com/Shougo/dein.vim') 
  call dein#add('autozimu/LanguageClient-neovim', {
      \ 'rev': 'next',
      \ 'build': 'bash install.sh',
      \ })
  call dein#add('junegunn/fzf', { 'build': './install --all', 'merged': 0 }) 
  call dein#add('junegunn/fzf.vim', { 'depends': 'fzf' })
  " call dein#add('ctrlpvim/ctrlp.vim')
  call dein#add('neovimhaskell/haskell-vim')
  call dein#add('Shougo/deoplete.nvim')
  call dein#add('Shougo/echodoc.vim')
  call dein#add('kassio/neoterm')
  call dein#add('lervag/vimtex')
  call dein#add('SirVer/ultisnips')
  call dein#add('tpope/vim-surround')
  call dein#add('scrooloose/nerdtree')
  call dein#add('jiangmiao/auto-pairs')
  call dein#add('tpope/vim-commentary')
  call dein#add('michaeljsmith/vim-indent-object')
  
  " markdown stuff
  call dein#add('iamcco/markdown-preview.nvim', {'on_ft': ['markdown', 'pandoc.markdown', 'rmd'],
					\ 'build': 'cd app & yarn install' })
  " Colorschemes
  call dein#add('dylanaraps/wal.vim')
  call dein#add('vim-airline/vim-airline')
  call dein#add('jacoborus/tender.vim')
  call dein#add('mhartington/oceanic-next')
  call dein#add('liuchengxu/space-vim-dark')
  call dein#add('joshdick/onedark.vim')
  call dein#add('tomasr/molokai')
  call dein#add('dikiaap/minimalist')
  call dein#add('cseelus/vim-colors-lucid')
  call dein#add('YorickPeterse/happy_hacking.vim')

  " Appearance plugins
  call dein#add('junegunn/goyo.vim')
  call dein#add('itchyny/lightline.vim')

  call dein#end()
  call dein#save_state()
endif


" basics
filetype plugin indent on
set shiftwidth=2
set colorcolumn=81  " 80 is the limit
set expandtab
set smartindent
set ignorecase
set smartcase
syntax enable
syntax on
set number "absolute line numbers
" set scrollbind "scroll splits at the same time. For file comparing
" set scb & set noscb  "this are the commands to turn on and off the scrollbinding
set ruler
set incsearch
set nohlsearch
set mouse=a " allows to use the mouse. Useful to resize window splits.
" terminal
set shell=bash
tnoremap <C-[> <C-\><C-n>
nnoremap <leader>s :%!bash<CR>
vnoremap <Leader>s :!bash<CR>


" filetype dependent identation
autocmd FileType c setlocal shiftwidth=4 softtabstop=4 expandtab



" Colorscheme / colors
" [wal, OceanicNext, space-vim-dark, tender, onedark, molokai, minimalist,
" lucid, happy_hacking]
let mi_colorscheme = "happy_hacking"
" let g:lightline = {'colorscheme': 'one'}
if mi_colorscheme != "wal"
  execute 'color' mi_colorscheme
  set termguicolors
  " hi StatusLine ctermbg=NONE cterm=NONE  "transparent status line
  hi LineNr ctermbg=NONE guibg=NONE
else
  execute 'color' mi_colorscheme
endif


" fold settings
set foldmethod=indent  "fold automatically generated by identation rules
set foldnestmax=10
set nofoldenable "makes sure that when opening, files are "normal", i.e. not folded
set foldlevel=2


" mappings
map <C-n> :NERDTreeToggle<CR>


" vimtext
" let g:vimtex_view_method = 'zathura'
" let g:vimtex_quickfix_mode=0
" let g:vimtex_compiler_latexmk = {
"         \ 'backend' : 'nvim',
"         \ 'background' : 1,
"         \ 'build_dir' : '',
"         \ 'callback' : 1,
"         \ 'continuous' : 1,
"         \ 'executable' : 'latexmk',
"         \ 'options' : [
"         \   '-pdf',
"         \   '-verbose',
"         \   '-file-line-error',
"         \   '-synctex=1',
"         \   '-interaction=nonstopmode',
"         \   '--shell-escape',
"         \ ],
"         \}

" ULtiSnips
let g:UltiSnipsSnippetsDir = "~/.config/nvim/snippets_ulti"
let g:UltiSnipsSnippetDirectories=["snippets_ulti"]
let g:UltiSnipsEditSplit = "vertical"
map gs :UltiSnipsEdit <CR>


" Language Server Protocol (LSP) with LanguageClient-neovim plugin
" Required for operations modifying multiple buffers like rename.
set hidden

let g:LanguageClient_serverCommands = {
      \ 'python': ['~/.config/nvim/lsp/pyls'],
      \ 'cpp': ['/usr/bin/clangd-8'],  
      \ 'c': ['~/.config/nvim/lsp/clangd'],   
      \ }
      " \ 'cpp': ['~/.config/nvim/lsp/clangd'],  
      " \ 'python': ['/home/luis/anaconda3/bin/pyls'],
      " \ 'cpp': ['/usr/bin/clangd-7']
      " \ 'c': ['/usr/bin/clangd-7']
      
" Automatically start language servers.
let g:LanguageClient_autoStart = 1
""""""""""""""""""""""""""""""""""
" Autocompletion Configurations
""""""""""""""""""""""""""""""""""
let g:deoplete#enable_at_startup = 1
" echodoc shows function parameters while you're writing its arguments
let g:echodoc#enable_at_startup = 1
let g:echodoc#type = 'floating'
" To use a custom highlight for the float window,
" change Pmenu to your highlight group
highlight link EchoDocFloat Pmenu


nnoremap <F5> :call LanguageClient_contextMenu()<CR>
" Or map each action separately
nnoremap <silent> K :call LanguageClient#textDocument_hover()<CR>
nnoremap <silent> gd :call LanguageClient#textDocument_definition()<CR>
nnoremap <silent> <F2> :call LanguageClient#textDocument_rename()<CR>


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" One key compilation and execution
" Note: % is the current buffer filename. %:r is the buffer filename without extension 
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" autocmd filetype python nnoremap <F5> :w <bar> exec '!python '.shellescape('%')<CR>
" autocmd filetype c nnoremap <F5> :w <bar> exec '!gcc '.shellescape('%').' -o '.shellescape('%:r').' && ./'.shellescape('%:r')<CR>
" autocmd filetype cpp nnoremap <F5> :w <bar> exec '!g++ '.shellescape('%').' -o '.shellescape('%:r').' && ./'.shellescape('%:r')<CR>


""""""""""""
" Neoterm
""""""""""""
" Building
autocmd filetype c nnoremap <F7> :T make<CR>
autocmd filetype c nnoremap <F8> :T make run<CR>
autocmd filetype cpp nnoremap <F7> :T cmake .. && make<CR>
autocmd filetype cpp nnoremap <F8> :T ../bin/$(ls ../bin)<CR>
nnoremap <C-L> :Tclear<CR>

" REPL shortcuts
nnoremap <C-c><C-C> :TREPLSendLine<CR>
vnoremap <C-c><C-C> :TREPLSendSelection<CR>

" Other
let g:neoterm_autoscroll = '1' "autoscroll terminal output
let g:neoterm_size = 10        "default would take 50% of neovim window


""""""""""""""""""""
" FZF (Fuzzy Finder)
""""""""""""""""""""
" let g:FZF = '<c-p>'
nnoremap <c-p> :FZF<CR>
nnoremap <leader>b :Buffers<CR>
nmap <leader>f :Ag<CR>

" Customize fzf colors to match your color scheme
let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'border':  ['fg', 'Ignore'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }

" Augmenting Ag command using fzf#vim#with_preview function
"   * fzf#vim#with_preview([[options], [preview window], [toggle keys...]])
"     * For syntax-highlighting, Ruby and any of the following tools are required:
"       - Bat: https://github.com/sharkdp/bat
"       - Highlight: http://www.andre-simon.de/doku/highlight/en/highlight.php
"       - CodeRay: http://coderay.rubychan.de/
"       - Rouge: https://github.com/jneen/rouge
"
"   :Ag  - Start fzf with hidden preview window that can be enabled with "?" key
"   :Ag! - Start fzf in fullscreen and display the preview window above
command! -bang -nargs=* Ag
  \ call fzf#vim#ag(<q-args>,
  \                 <bang>0 ? fzf#vim#with_preview('up:60%')
  \                         : fzf#vim#with_preview('right:50%:hidden', '?'),
  \                 <bang>0)

" Similarly, we can apply it to fzf#vim#grep. To use ripgrep instead of ag:
command! -bang -nargs=* Rg
  \ call fzf#vim#grep(
  \   'rg --column --line-number --no-heading --color=always --smart-case '.shellescape(<q-args>), 1,
  \   <bang>0 ? fzf#vim#with_preview('up:60%')
  \           : fzf#vim#with_preview('right:50%:hidden', '?'),
  \   <bang>0)

" Likewise, Files command with preview window
command! -bang -nargs=? -complete=dir Files
  \ call fzf#vim#files(<q-args>, fzf#vim#with_preview(), <bang>0)


""""""""""""""""""""""
" haskell-vim plugin
""""""""""""""""""""""
let g:haskell_enable_quantification = 1   " to enable highlighting of `forall`
let g:haskell_enable_recursivedo = 1      " to enable highlighting of `mdo` and `rec`
let g:haskell_enable_arrowsyntax = 1      " to enable highlighting of `proc`
let g:haskell_enable_pattern_synonyms = 1 " to enable highlighting of `pattern`
let g:haskell_enable_typeroles = 1        " to enable highlighting of type roles
let g:haskell_enable_static_pointers = 1  " to enable highlighting of `static`
let g:haskell_backpack = 1                " to enable highlighting of backpack keywords



" markdown create image from clipboard
" autocmd FileType markdown nmap <silent> <leader>p :call mdip#MarkdownClipboardImage()<CR>
" there are some defaults for image directory and image name, you can change them
" let g:mdip_imgdir = 'img'
" let g:mdip_imgname = 'image'
autocmd FileType markdown nmap <silent> <leader>p :call SaveFile()<cr>

function! SaveFile() abort
  let targets = filter(
        \ systemlist('xclip -selection clipboard -t TARGETS -o'),
        \ 'v:val =~# ''image''')
  if empty(targets) | return | endif

  let outdir = expand('%:p:h') . '/img'
  if !isdirectory(outdir)
    call mkdir(outdir)
  endif

  let mimetype = targets[0]
  let extension = split(mimetype, '/')[-1]
  let tmpfile = outdir . '/savefile_tmp.' . extension
  call system(printf('xclip -selection clipboard -t %s -o > %s',
        \ mimetype, tmpfile))

  let cnt = 0
  let filename = outdir . '/image' . cnt . '.' . extension
  while filereadable(filename)
    call system('diff ' . tmpfile . ' ' . filename)
    if !v:shell_error
      call delete(tmpfile)
      break
    endif

    let cnt += 1
    let filename = outdir . '/image' . cnt . '.' . extension
  endwhile

  if filereadable(tmpfile)
    call rename(tmpfile, filename)
  endif

  let @* = '![Picture](' . fnamemodify(filename, ':.') . ')'
  normal! "*p
endfunction

